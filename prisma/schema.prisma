// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  refresh_token_expires_in String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  firstSteps    Boolean?  @default(false)
  username      String?   @unique
  role          Role?     @relation(fields: [roleId], references: [id])
  accounts      Account[]
  sessions      Session[]
  profile       Profile?

  roleId Int?

  @@index([roleId])
}

//App data
model Profile {
  id              Int               @id @default(autoincrement())
  profilePicture  String
  name            String            @db.Text
  gender          Gender?           @relation(fields: [genderId], references: [id])
  categories      Category[]
  about           String            @db.Text
  country         Country?          @relation(fields: [countryId], references: [id])
  city            City?             @relation(fields: [cityId], references: [id])
  user            User              @relation(fields: [userId], references: [id])
  website         String            @db.Text
  rating          String?
  userSocialMedia UserSocialMedia[]
  profileReviews  Review[]          @relation("profileReviewd")
  submitedReviews Review[]          @relation("author")
  portfolio       Portfolio[]

  userId    String @unique
  genderId  Int?
  countryId Int?
  cityId    Int?

  @@index([userId])
  @@index([genderId])
  @@index([countryId])
  @@index([cityId])
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  profile Profile[]
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique
  user User[]
}

model Gender {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  profile Profile[]
}

model ValuePack {
  id                Int              @id @default(autoincrement())
  deliveryTime      Int
  numberOfRevisions Int
  valuePackPrice    Int
  userSocialMedia   UserSocialMedia? @relation(fields: [userSocialMediaId], references: [id])
  contentType       ContentType?     @relation(fields: [contentTypeId], references: [id])

  contentTypeId     Int
  userSocialMediaId Int

  @@index([contentTypeId])
  @@index([userSocialMediaId])
}

model SocialMedia {
  id              Int               @id @default(autoincrement())
  name            String
  UserSocialMedia UserSocialMedia[]
  contentTypes    ContentType[]
}

model Portfolio {
  id      Int      @id @default(autoincrement())
  url     String   @db.Text
  profile Profile? @relation(fields: [profileId], references: [id])

  profileId Int?

  @@index([profileId])
}

model UserSocialMedia {
  id          Int          @id @default(autoincrement())
  socialMedia SocialMedia? @relation(fields: [socialMediaId], references: [id])
  handler     String
  followers   Int
  url         String
  profile     Profile?     @relation(fields: [profileId], references: [id])
  valuePacks  ValuePack[]

  socialMediaId Int
  profileId     Int?

  @@index([socialMediaId])
  @@index([profileId])
}

model Review {
  id             Int      @id @default(autoincrement())
  userReview     String   @db.Text
  date           DateTime
  rating         Decimal
  profileReviewd Profile? @relation("profileReviewd", fields: [profileReviewdId], references: [id])
  author         Profile? @relation("author", fields: [authorId], references: [id])

  profileReviewdId Int?
  authorId         Int?

  @@index([profileReviewdId])
  @@index([authorId])
}

model Reason {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  contactMessage ContactMessage[]
}

model ContactMessageState {
  id             Int              @id @default(autoincrement())
  name           String
  contactMessage ContactMessage[]
}

model ContactMessage {
  id                  Int                  @id @default(autoincrement())
  name                String
  email               String
  message             String               @db.Text
  contactMessageState ContactMessageState? @relation(fields: [contactMessageStateId], references: [id])
  reason              Reason?              @relation(fields: [reasonId], references: [id])

  contactMessageStateId Int
  reasonId              Int

  @@index([contactMessageStateId])
  @@index([reasonId])
}

model ContentType {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  valuePacks  ValuePack[]
  socialMedia SocialMedia[]
}

model Country {
  id      Int       @id @default(autoincrement())
  name    String
  profile Profile[]
  state   State[]
}

model State {
  id      Int      @id @default(autoincrement())
  name    String
  country Country? @relation(fields: [countryId], references: [id])
  city    City[]

  countryId Int

  @@index([countryId])
}

model City {
  id      Int       @id @default(autoincrement())
  name    String
  state   State?    @relation(fields: [stateId], references: [id])
  profile Profile[]

  stateId Int

  @@index([stateId])
}
