// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  refresh_token_expires_in String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  firstSteps    Boolean?  @default(false)
  accounts      Account[]
  sessions      Session[]
  profile       Profile?
}

//App data
model Profile {
  id              Int               @id @default(autoincrement())
  profilePicture  String
  name            String
  role            Role?             @relation(fields: [roleId], references: [id])
  gender          Gender?           @relation(fields: [genderId], references: [id])
  categories      Category[]
  about           String            @db.Text
  country         String
  city            String
  user            User              @relation(fields: [userId], references: [id])
  valuePacks      ValuePack[]
  website         String
  userSocialMedia UserSocialMedia[]

  userId   String @unique
  roleId   Int?
  genderId Int?

  @@index([userId])
  @@index([roleId])
  @@index([genderId])
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  profile Profile[]
}

model Role {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Profile Profile[]
}

model Gender {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Profile Profile[]
}

model ValuePack {
  id                Int          @id @default(autoincrement())
  title             String
  socialMedia       SocialMedia? @relation(fields: [socialMediaId], references: [id])
  description       String       @db.Text
  deliveryTime      Int
  numberOfRevisions Int
  valuePackPrice    Int
  profile           Profile?     @relation(fields: [profileId], references: [id])

  socialMediaId Int
  profileId     Int?

  @@index([profileId])
  @@index([socialMediaId])
}

model SocialMedia {
  id              Int               @id @default(autoincrement())
  name            String
  valuePack       ValuePack[]
  UserSocialMedia UserSocialMedia[]
}

model UserSocialMedia {
  id          Int          @id @default(autoincrement())
  socialMedia SocialMedia? @relation(fields: [socialMediaId], references: [id])
  handler     String
  followers   Int
  profile     Profile?     @relation(fields: [profileId], references: [id])

  socialMediaId Int
  profileId     Int?

  @@index([socialMediaId])
  @@index([profileId])
}
