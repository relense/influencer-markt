// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  refresh_token_expires_in String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  username        String?   @unique
  role            Role?     @relation(fields: [roleId], references: [id])
  userType        String    @default("user")
  isOver18        Boolean   @default(false)
  stripeAccountId String?

  payoutsResolved PayoutInvoice[]

  accounts Account[]
  sessions Session[]
  profile  Profile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roleId Int?

  @@index([roleId])
}

//App data
model Profile {
  id                        String     @id @default(cuid())
  profilePicture            String     @db.Text
  profilePictureBlobName    String     @db.Text
  name                      String     @db.Text
  gender                    Gender?    @relation(fields: [genderId], references: [id])
  categories                Category[]
  about                     String     @db.Text
  country                   Country?   @relation(fields: [countryId], references: [id])
  city                      City?      @relation(fields: [cityId], references: [id])
  user                      User       @relation(fields: [userId], references: [id])
  website                   String     @db.Text
  rating                    String?
  disableEmailNotifications Boolean    @default(false)
  disableAppNotifications   Boolean    @default(false)
  showWelcomeModal          Boolean    @default(true)

  userSocialMedia UserSocialMedia[]
  profileReviews  Review[]          @relation("profileReviewd")
  submitedReviews Review[]          @relation("author")
  portfolio       Portfolio[]
  verifiedStatus  VerifiedStatus?   @relation(fields: [verifiedStatusId], references: [id])
  billing         Billing?
  invoices        Invoice[]
  payouts         Payout[]
  payoutsInvoice  PayoutInvoice[]

  createdJobs        Job[] @relation("jobCreator")
  appliedJobs        Job[] @relation("jobApplicants")
  acceptedJobs       Job[] @relation("jobAcceptedApplicants")
  rejectedApplicants Job[] @relation("jobRejectedApplicants")
  sentApplicants     Job[] @relation("jobSentApplicants")

  influencer Order[] @relation("influencer")
  buyer      Order[] @relation("buyer")

  favoriteBy Profile[] @relation("profileFavorites")
  favorites  Profile[] @relation("profileFavorites")

  actor    Notification[] @relation("actor")
  notifier Notification[] @relation("notifier")

  sender   Message[] @relation("sender")
  receiver Message[] @relation("receiver")

  credit Credit?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId           String @unique
  genderId         Int?
  countryId        Int?
  cityId           Int?
  verifiedStatusId Int?

  @@index([userId])
  @@index([genderId])
  @@index([countryId])
  @@index([cityId])
  @@index([verifiedStatusId])
}

model Category {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  profile Profile[]
  Job     Job[]
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique
  user User[]
}

model Gender {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  profile Profile[]
  Job     Job[]
}

model ValuePack {
  id              Int              @id @default(autoincrement())
  valuePackPrice  Int
  userSocialMedia UserSocialMedia? @relation(fields: [userSocialMediaId], references: [id])
  contentType     ContentType?     @relation(fields: [contentTypeId], references: [id])

  contentTypeId     Int
  userSocialMediaId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([contentTypeId])
  @@index([userSocialMediaId])
}

model SocialMedia {
  id              Int               @id @default(autoincrement())
  name            String
  UserSocialMedia UserSocialMedia[]
  contentTypes    ContentType[]
  Job             Job[]
  order           Order[]
}

model Portfolio {
  id       Int      @id @default(autoincrement())
  url      String   @db.Text
  blobName String   @db.Text
  profile  Profile? @relation(fields: [profileId], references: [id])

  profileId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

model UserSocialMedia {
  id          Int          @id @default(autoincrement())
  socialMedia SocialMedia? @relation(fields: [socialMediaId], references: [id])
  handler     String
  followers   Int
  url         String
  profile     Profile?     @relation(fields: [profileId], references: [id])
  valuePacks  ValuePack[]

  socialMediaId Int
  profileId     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([socialMediaId])
  @@index([profileId])
}

model Review {
  id             Int      @id @default(autoincrement())
  userReview     String   @db.Text
  rating         Int
  profileReviewd Profile? @relation("profileReviewd", fields: [profileReviewdId], references: [id])
  author         Profile? @relation("author", fields: [authorId], references: [id])
  order          Order?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profileReviewdId String?
  authorId         String?
  orderId          Int?

  @@index([profileReviewdId])
  @@index([authorId])
  @@index([orderId])
}

model Reason {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  contactMessage ContactMessage[]
}

model ContactMessageState {
  id             Int              @id @default(autoincrement())
  name           String
  contactMessage ContactMessage[]
}

model ContactMessage {
  id                  Int                  @id @default(autoincrement())
  name                String
  email               String
  message             String               @db.Text
  contactMessageState ContactMessageState? @relation(fields: [contactMessageStateId], references: [id])
  reason              Reason?              @relation(fields: [reasonId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  closedAt  DateTime?

  contactMessageStateId Int
  reasonId              Int

  @@index([contactMessageStateId])
  @@index([reasonId])
}

model ContentType {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @unique
  valuePacks              ValuePack[]
  socialMedia             SocialMedia[]
  ContentTypeWithQuantity ContentTypeWithQuantity[]
  orderValuePacks         OrderValuePack[]
}

model Country {
  id           Int     @id @default(autoincrement())
  name         String
  countryTax   Int?
  languageCode String?

  profile Profile[]
  state   State[]
  Job     Job[]
  order   Order[]
}

model State {
  id      Int      @id @default(autoincrement())
  name    String
  country Country? @relation(fields: [countryId], references: [id])
  city    City[]

  countryId Int
  Job       Job[]

  @@index([countryId])
}

model City {
  id      Int       @id @default(autoincrement())
  name    String
  state   State?    @relation(fields: [stateId], references: [id])
  profile Profile[]

  stateId Int

  @@index([stateId])
}

model Job {
  id                      String                    @id @default(cuid())
  jobSummary              String
  JobDetails              String                    @db.Text
  socialMedia             SocialMedia               @relation(fields: [socialMediaId], references: [id])
  contentTypeWithQuantity ContentTypeWithQuantity[]
  categories              Category[]
  price                   Int
  numberOfInfluencers     Int
  country                 Country                   @relation(fields: [countryId], references: [id])
  state                   State?                    @relation(fields: [stateId], references: [id])
  minFollowers            Int
  maxFollowers            Int?
  gender                  Gender?                   @relation(fields: [genderId], references: [id])
  jobStatus               JobStatus                 @relation(fields: [jobStatusId], references: [id])
  jobCreator              Profile                   @relation("jobCreator", fields: [profileId], references: [id])
  published               Boolean                   @default(false)
  order                   Order[]

  applicants         Profile[] @relation("jobApplicants")
  acceptedApplicants Profile[] @relation("jobAcceptedApplicants")
  rejectedApplicants Profile[] @relation("jobRejectedApplicants")
  sentApplicants     Profile[] @relation("jobSentApplicants")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  socialMediaId Int
  countryId     Int
  genderId      Int?
  stateId       Int?
  profileId     String
  jobStatusId   Int    @default(1)

  @@index([socialMediaId])
  @@index([countryId])
  @@index([genderId])
  @@index([stateId])
  @@index([profileId])
  @@index([jobStatusId])
}

model ContentTypeWithQuantity {
  id          Int         @id @default(autoincrement())
  contentType ContentType @relation(fields: [contentTypeId], references: [id])
  amount      Int
  Job         Job?        @relation(fields: [jobId], references: [id])

  contentTypeId Int
  jobId         String?

  @@index([contentTypeId])
  @@index([jobId])
}

model JobStatus {
  id   Int    @id @default(autoincrement())
  name String

  job Job[]
}

model VerifiedStatus {
  id   Int    @id @default(autoincrement())
  name String

  profile Profile[]
}

model Order {
  id                          String             @id @default(cuid())
  influencer                  Profile?           @relation("influencer", fields: [influencerId], references: [id])
  buyer                       Profile?           @relation("buyer", fields: [buyerId], references: [id])
  orderDetails                String             @db.Text
  orderValuePacks             OrderValuePack[]
  orderInfluencerCountry      Country?           @relation(fields: [countryId], references: [id])
  orderBasePrice              Int
  orderTotalPrice             Int
  orderTotalPriceWithDiscount Int?
  orderTaxPercentage          Int
  orderServicePercentage      Int
  orderStatus                 OrderStatus?       @relation(fields: [orderStatusId], references: [id])
  socialMedia                 SocialMedia?       @relation(fields: [socialMediaId], references: [id])
  review                      Review?            @relation(fields: [reviewId], references: [id])
  job                         Job?               @relation(fields: [jobId], references: [id])
  messages                    Message[]
  dispute                     Dispute?
  dateOfDelivery              DateTime
  dateItWasDelivered          DateTime?
  invoice                     Invoice?
  payout                      Payout?
  payment                     Payment[]
  refund                      Refund?
  discount                    CreditTransaction?

  influencerId  String?
  buyerId       String?
  countryId     Int?
  orderStatusId Int?
  socialMediaId Int?
  reviewId      Int?    @unique
  jobId         String?
  disputeId     Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([socialMediaId])
  @@index([orderStatusId])
  @@index([countryId])
  @@index([influencerId])
  @@index([buyerId])
  @@index([reviewId])
  @@index([jobId])
  @@index([disputeId])
}

model OrderValuePack {
  id          Int         @id @default(autoincrement())
  contentType ContentType @relation(fields: [contentTypeId], references: [id])
  amount      Int
  price       Int
  Order       Order?      @relation(fields: [orderId], references: [id])

  contentTypeId Int
  orderId       String?

  @@index([contentTypeId])
  @@index([orderId])
}

model OrderStatus {
  id   Int    @id @default(autoincrement())
  name String

  order Order[]
}

model NotificationType {
  id           Int    @id @default(autoincrement())
  entityType   String
  entityAction String

  notifications Notification[]
}

model NotificationStatus {
  id   Int    @id @default(autoincrement())
  name String

  notification Notification[]
}

model Notification {
  id                 Int                @id @default(autoincrement())
  actor              Profile            @relation("actor", fields: [actorId], references: [id])
  notifier           Profile            @relation("notifier", fields: [notifierId], references: [id])
  notificationType   NotificationType   @relation(fields: [notificationTypeId], references: [id])
  notificationStatus NotificationStatus @relation(fields: [notificationStatusId], references: [id])
  entityId           String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  actorId              String
  notifierId           String
  notificationTypeId   Int
  notificationStatusId Int

  @@index([actorId])
  @@index([notifierId])
  @@index([notificationTypeId])
  @@index([notificationStatusId])
}

model Message {
  id       Int     @id @default(autoincrement())
  sender   Profile @relation("sender", fields: [senderId], references: [id])
  receiver Profile @relation("receiver", fields: [receiverId], references: [id])
  order    Order   @relation(fields: [orderId], references: [id])
  message  String  @db.Text
  isRead   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  senderId   String
  receiverId String
  orderId    String

  @@index([senderId])
  @@index([receiverId])
  @@index([orderId])
}

model Dispute {
  id                     Int            @id @default(autoincrement())
  order                  Order          @relation(fields: [orderId], references: [id])
  message                String         @db.Text
  disputeStatus          DisputeStatus? @relation(fields: [disputeStatusId], references: [id])
  disputeSolver          String?
  influencerFault        Boolean?
  disputeDecisionMessage String?        @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId         String @unique
  disputeStatusId Int

  @@index([orderId])
  @@index([disputeStatusId])
}

model DisputeStatus {
  id   Int    @id @default(autoincrement())
  name String

  dispute Dispute[]
}

model Billing {
  id            String  @id @default(cuid())
  name          String?
  email         String?
  tin           String?
  payoutEnabled Boolean @default(false)
  profile       Profile @relation(fields: [profileId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profileId String @unique

  @@index([profileId])
}

model Invoice {
  id                        String           @id @default(cuid())
  profile                   Profile          @relation(fields: [profileId], references: [id])
  order                     Order            @relation(fields: [orderId], references: [id])
  name                      String
  email                     String
  tin                       String
  saleBaseValue             Int
  saleTotalValue            Int
  influencerMarktCutValue   Int?
  influencerMarktPercentage Int?
  taxValue                  Int
  taxPercentage             Int
  discountValue             Int
  invoiceBlobData           InvoiceBlobData? @relation(fields: [invoiceBlobDataId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId           String  @unique
  profileId         String
  invoiceBlobDataId String? @unique

  @@index([orderId])
  @@index([profileId])
  @@index([invoiceBlobDataId])
}

model InvoiceBlobData {
  id                        String @id @default(cuid())
  influencerInvoice         String @db.Text
  influencerInvoiceBlobName String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Invoice Invoice?
}

model Payout {
  id              String         @id @default(cuid())
  profile         Profile        @relation(fields: [profileId], references: [id])
  order           Order          @relation(fields: [orderId], references: [id])
  name            String
  email           String
  tin             String
  payoutValue     Int
  taxesValue      Int
  taxesPercentage Int
  paid            Boolean        @default(false)
  payoutInvoice   PayoutInvoice? @relation(fields: [payoutInvoiceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId         String  @unique
  profileId       String
  payoutInvoiceId String?

  @@index([orderId])
  @@index([profileId])
  @@index([payoutInvoiceId])
}

model PayoutInvoiceStatus {
  id   Int    @id @default(autoincrement())
  name String

  payouts PayoutInvoice[]
}

model PayoutInvoice {
  id                        String              @id @default(cuid())
  influencerInvoice         String              @db.Text
  influencerInvoiceBlobName String              @db.Text
  payoutSolver              User?               @relation(fields: [userId], references: [id])
  payoutInvoiceStatus       PayoutInvoiceStatus @relation(fields: [payoutInvoiceStatusId], references: [id])
  payouts                   Payout[]
  invoiceValue              Int
  influencer                Profile?            @relation(fields: [profileId], references: [id])

  isentOfTaxes                 Boolean @default(false)
  isPayoutValueCorect          Boolean @default(false)
  isVATCorrect                 Boolean @default(false)
  isOurTinCorrect              Boolean @default(false)
  isOurCountryCorrect          Boolean @default(false)
  isCompanyNameCorrect         Boolean @default(false)
  correctTypeOfPaymentSelected Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payoutInvoiceStatusId Int
  userId                String?
  profileId             String?

  @@index([payoutInvoiceStatusId])
  @@index([userId])
  @@index([profileId])
}

model Payment {
  id            String  @id @default(cuid())
  paymentIntent String
  amount        Int
  order         Order   @relation(fields: [orderId], references: [id])
  status        String  @default("Initiated")
  Refund        Refund?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId String

  @@index([orderId])
}

model Refund {
  id                String             @id @default(cuid())
  refundValue       Int
  order             Order              @relation(fields: [orderId], references: [id])
  isCredit          Boolean
  creditTransaction CreditTransaction?
  payment           Payment?           @relation(fields: [paymentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId   String  @unique
  paymentId String? @unique

  @@index([orderId])
  @@index([paymentId])
}

model Credit {
  id                String              @id @default(cuid())
  creditTransaction CreditTransaction[]
  profile           Profile             @relation(fields: [profileId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profileId String @unique

  @@index([profileId])
}

model CreditTransaction {
  id            String  @id @default(cuid())
  amount        Int
  isWithdraw    Boolean @default(false)
  credit        Credit  @relation(fields: [creditId], references: [id])
  refund        Refund? @relation(fields: [refundId], references: [id])
  orderDiscount Order?  @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refundId String? @unique
  creditId String
  orderId  String? @unique

  @@index([refundId])
  @@index([creditId])
}
